#!/usr/bin/python
# Attention: some really dirty code ahead. That mess is needed to enable the
# fancy completion.
from xbindkeys import Xbindkeysrc, EnvironmentError
import sys
import os
import readline
import argparse
import subprocess
import signal
from argparse import ArgumentError

VERSION = '0.1.0'
LIST_CONST_VALUE = -1


parser = argparse.ArgumentParser(description='Helps editing xbindkeys cofig')
parser.add_argument('command', nargs='?')
parser.add_argument('keysym', nargs='?')
add_arg_delete = parser.add_argument(
    '-d', 
    '--delete',
    metavar='KEYSYM_OR_KEYCODE',
    nargs='?',
    const='-',
    help='if argument is provided, deletes a binding associated with the given keysym or keycode. Otherwise chooses a key using `xbindkeys -k` and removes a command associated with that key',
    )
add_arg_delete_by_command = parser.add_argument(
    '-D', 
    '--delete-by-command', 
    metavar='COMMAND',
    help='remove binding that runs a certain command',
    )
parser.add_argument(
    '-c', 
    '--change', 
    action='store_true',
    help='tells the utility to use completion of commands from XBINDKEYSRC when defining a binding',
    )
parser.add_argument(
    '-f', 
    '--file', 
    metavar='XBINDKEYSRC',
    default=os.path.join(os.getenv('HOME'), '.xbindkeysrc'),
    help='lets you choose a file in which bindings will be edited and stored (default is $HOME/.xbindkeysrc)',
    )
parser.add_argument(
    '-r', 
    '--restart', 
    action='store_true',
    help='restarts xbindkeys daemon (however other commands do so automatically)',
    )
parser.add_argument(
    '-k', 
    '--kill', 
    action='store_true',
    help='kills xbindkeys daemon',
    )
parser.add_argument(
    '-s', 
    '--show', 
    nargs='?',
    const=LIST_CONST_VALUE,
    help='shows a particular binding by its command, keysym or keycode',
    )
parser.add_argument(
    '-V', 
    '--version', 
    action='store_true',
    help='displays program version',
    )


def main(args):
    def sigint_handler(signal, frame):
        '''
        If user interrupts the program with Control-C, it restarts xbindkeys
        before exiting, but doesn't do so if xbindkeys wasn't restarted by
        Xbindkeys obect.
        '''
        if xb.xbindkeys_was_killed():
            subprocess.call(['xbindkeys'])
        sys.exit(1)

    signal.signal(signal.SIGINT, sigint_handler)
    iterator = iter(sys.argv)
    for arg in iterator:
        if arg in ('-f', '--file'):
            file_provided = True
            break
    else:
        file_provided = False

    xb = Xbindkeysrc(args.file)
    if args.delete != None:
        if args.delete == '-':
            keycode, keysym = xb.read_key()
        elif xb.is_keycode(args.delete):
            keycode = args.delete
            keysym = None
        elif xb.is_keysym(args.delete):
            keycode = None
            keysym = args.delete
        else:
            sys.stderr.write('Argument '+args.delete+' is not a keycode or keysym')
            sys.exit(1)
        item = xb.remove_binding(keycode=keycode, keysym=keysym)
        keycode_or_keysym = keysym if keysym != None else keycode
        if item == False:
            print 'There is no binding defined for', keycode_or_keysym
            sys.exit(1)
        else:
            print 'Command "' + item['command'] + '" removed from combination '+keycode_or_keysym
        xb.write_config()
    elif args.delete_by_command != None:
        command = args.delete_by_command
        item = xb.get_binding(command=command)
        if item == False:
            print 'There is no binding with command "' + args.delete_by_command + '"'
            sys.exit(1)
        keysym = item['keysym']
        xb.remove_binding(command)
        print 'Command', command, 'removed from combination', keysym
        xb.write_config()
    elif args.restart:
        xb.restart_xbindkeys()
    elif args.kill:
        xb.kill_xbindkeys()
    elif args.show:
        if args.show == LIST_CONST_VALUE:
            keycode, keysym = xb.read_key()
            if xb.get_binding(keycode=keycode, keysym=keysym):
                print xb.show_binding(keycode=keycode, keysym=keysym)
            else:
                print 'No biding for', keysym
        else:
            # If there is 1 argument to -l
            shown = False
            if xb.get_binding(command=args.show):
                print xb.show_binding(command=args.show)
                shown = True
            if xb.get_binding(keysym=args.show):
                print xb.show_binding(keysym=args.show)
                shown = True
            if xb.get_binding(keycode=args.show):
                print xb.show_binding(keycode=args.show)
                shown = True
            if not shown:
                print 'No biding for', args.show
    elif args.command:
        command = args.command
        keysym = args.keysym
        if keysym == None:
            print 'Choose a combination to bind: '
            try:
                keycode, keysym = xb.read_key()
            except EnvironmentError as e:
                sys.stderr.write(str(e))
                sys.exit(1)
            print 'Combination', keysym, 'selected'
        else:
            keycode = None
        binding_exists = xb.binding_exists(keycode, keysym)
        if binding_exists:
            command = xb.get_binding(keycode=keycode, keysym=keysym)['command']
            answer = raw_input('Combination '+keysym+' already has command "'+command+'" asscoiated with it. Do you want to rewrite it? [Y/n]: ')
            if len(answer)>0 and answer[0] in ['n', 'N']:
                sys.exit()
            else:
                xb.remove_binding(keysym=keysym)
        # These completer delimiters differ from default ones only in that they
        # don't include a hyphen
        readline.set_completer_delims(' \t\n`~!@#$%^&*()=+[{]}\\|;:\'",<>/?')
        # Make completion for all system commands and aliases avaliable
        if binding_exists:
            # If there is a command for that combination, automatically
            # insert that existing command
            readline.set_startup_hook(lambda: readline.insert_text(command))
        if command == None:
            command = raw_input('Enter a command you want to bind (use Tab for completion): ')
        if binding_exists:
            xb.remove_binding(keycode=keycode, keysym=keysym, command=command)
        xb.add_binding(keycode=keycode, keysym=keysym, command=command)
        xb.write_config()
        if not file_provided:
            xb.restart_xbindkeys()
    elif args.version:
        print VERSION
    else:
        # No arguments at all
        print xb

if __name__ == '__main__':
    main(parser.parse_args())

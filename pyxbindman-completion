#!/usr/bin/env python
from xbindkeys import Xbindkeysrc, EnvironmentError
import sys
import os
import readline
import argparse
import subprocess
import signal
from argparse import ArgumentError

parser = argparse.ArgumentParser()
add_arg_delete = parser.add_argument(
    '-a',
    '--add',
    nargs='*'
    )
add_arg_delete = parser.add_argument(
    '-d', 
    '--delete',
    nargs='?',
    metavar='KEYSYM_OR_KEYCODE',
    )
add_arg_delete_by_command = parser.add_argument(
    '-D', 
    '--delete-by-command', 
    nargs='?',
    metavar='COMMAND',
    )
parser.add_argument(
    '-l', 
    '--list', 
    action='store_true',
    )
parser.add_argument(
    '-e', 
    '--edit', 
    metavar=('KEYSYM', 'NEW_COMMAND'),
    nargs='*',
    )
parser.add_argument(
    '-E', 
    '--edit-by-command', 
    metavar=('COMMAND', 'NEW_COMMAND'),
    nargs='*',
    )
parser.add_argument(
    '-i', 
    '--interactive', 
    action='store_true',
    )
parser.add_argument(
    '-f', 
    '--file', 
    default=os.path.join(os.getenv('HOME'), '.xbindkeysrc'),
    )
parser.add_argument(
    '-r', 
    '--restart', 
    action='store_true',
    )
parser.add_argument(
    '-s', 
    '--stop', 
    action='store_true',
    )

def print_completion(args):
    '''
    Prints a list of completion choices divided by newline character.
    Used by /etc/bash_completion.d/pyxbindman
    '''
    if args.file:
        file = args.file
    else:
        file = xbindkeys.DEFAULT_RC

    mut_ex_args = (args.delete, args.delete_by_command, args.edit,
            args.edit_by_command, args.command)
    # Check if no two mutually exclusive arguments are present at the same time
    if (((args.delete != None) ^ (args.delete_by_command != None) ^
            (args.command != None) ^ (args.change != None) ^ (args.change_by_command
            != None)) or (args.delete == None and args.delete_by_command == None
                and args.change == None and args.change_by_command == None and
                args.command == None)):
        sys.exit(0)
    print args.file

if __name__ == '__main__':
    print_completion(parser.parse_args())
